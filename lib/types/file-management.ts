// Types for File Management System

export interface FileCategory {
  id: string;
  name: string;
  description: string;
  icon: string;
  color: string;
}

export interface FileDocument {
  id: string;
  name: string;
  originalName: string;
  fileName: string;
  filePath: string;
  fileSize: number;
  fileType: string;
  mimeType: string;
  categoryId: string;
  category?: FileCategory;
  description?: string;
  tags: string[];
  uploadedBy: string;
  uploadedAt: Date;
  updatedAt: Date;
  isActive: boolean;
  downloadCount: number;
  metadata?: Record<string, any>;
}

export interface FileUploadRequest {
  file: File;
  categoryId: string;
  description?: string;
  tags: string[];
}

export interface FileSearchParams {
  query?: string;
  categoryId?: string;
  fileType?: string;
  tags?: string[];
  dateFrom?: Date;
  dateTo?: Date;
  sortBy?: 'name' | 'uploadedAt' | 'fileSize' | 'downloadCount';
  sortOrder?: 'asc' | 'desc';
}

export const FILE_CATEGORIES: FileCategory[] = [
  {
    id: 'postal-services',
    name: 'D·ªãch V·ª• B∆∞u Ch√≠nh',
    description: 'T√†i li·ªáu li√™n quan ƒë·∫øn d·ªãch v·ª• b∆∞u ch√≠nh v√† chuy·ªÉn ph√°t',
    icon: 'üìÆ',
    color: 'bg-blue-500'
  },
  {
    id: 'insurance-health',
    name: 'B·∫£o Hi·ªÉm Y T·∫ø',
    description: 'Quy·∫øt ƒë·ªãnh v√† t√†i li·ªáu BHYT',
    icon: 'üè•',
    color: 'bg-green-500'
  },
  {
    id: 'education',
    name: 'Gi√°o D·ª•c',
    description: 'Th√¥ng b√°o v√† t√†i li·ªáu gi√°o d·ª•c, h·ªçc ph√≠',
    icon: 'üéì',
    color: 'bg-purple-500'
  },
  {
    id: 'business-plans',
    name: 'K·∫ø Ho·∫°ch Kinh Doanh',
    description: 'Presentations v√† k·∫ø ho·∫°ch ph√°t tri·ªÉn',
    icon: 'üìä',
    color: 'bg-orange-500'
  },
  {
    id: 'regulations',
    name: 'Quy ƒê·ªãnh & Quy·∫øt ƒê·ªãnh',
    description: 'C√°c quy·∫øt ƒë·ªãnh h√†nh ch√≠nh v√† quy ƒë·ªãnh',
    icon: 'üìã',
    color: 'bg-red-500'
  },
  {
    id: 'administrative',
    name: 'H√†nh Ch√≠nh',
    description: 'T√†i li·ªáu h√†nh ch√≠nh t·ªïng qu√°t',
    icon: 'üèõÔ∏è',
    color: 'bg-gray-500'
  }
];

export const SUPPORTED_FILE_TYPES = {
  pdf: {
    extensions: ['.pdf'],
    mimeTypes: ['application/pdf'],
    icon: 'üìÑ',
    name: 'PDF Document'
  },
  excel: {
    extensions: ['.xlsx', '.xls'],
    mimeTypes: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'],
    icon: 'üìä',
    name: 'Excel Spreadsheet'
  },
  powerpoint: {
    extensions: ['.pptx', '.ppt'],
    mimeTypes: ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.ms-powerpoint'],
    icon: 'üìà',
    name: 'PowerPoint Presentation'
  },
  word: {
    extensions: ['.docx', '.doc'],
    mimeTypes: ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword'],
    icon: 'üìù',
    name: 'Word Document'
  },
  image: {
    extensions: ['.jpg', '.jpeg', '.png', '.gif', '.webp'],
    mimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
    icon: 'üñºÔ∏è',
    name: 'Image File'
  }
};

export function getFileTypeInfo(fileName: string) {
  const extension = fileName.toLowerCase().substring(fileName.lastIndexOf('.'));
  
  for (const [type, info] of Object.entries(SUPPORTED_FILE_TYPES)) {
    if (info.extensions.includes(extension)) {
      return { type, ...info };
    }
  }
  
  return {
    type: 'unknown',
    icon: 'üìÑ',
    name: 'Unknown File Type'
  };
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

export function categorizeFileByName(fileName: string): string {
  const name = fileName.toLowerCase();
  
  // D·ªãch v·ª• b∆∞u ch√≠nh
  if (name.includes('b∆∞u') || name.includes('chuy·ªÉn ph√°t') || name.includes('vnpost') || name.includes('c∆∞·ªõc')) {
    return 'postal-services';
  }
  
  // B·∫£o hi·ªÉm y t·∫ø
  if (name.includes('bhyt') || name.includes('b·∫£o hi·ªÉm') || name.includes('y t·∫ø')) {
    return 'insurance-health';
  }
  
  // Gi√°o d·ª•c
  if (name.includes('h·ªçc ph√≠') || name.includes('hs-gv') || name.includes('gi√°o d·ª•c') || name.includes('h·ªçc')) {
    return 'education';
  }
  
  // K·∫ø ho·∫°ch kinh doanh
  if (name.includes('gi·∫£i ph√°p') || name.includes('ph√°t tri·ªÉn') || name.includes('k·∫ø ho·∫°ch') || name.includes('slide')) {
    return 'business-plans';
  }
  
  // Quy ƒë·ªãnh & quy·∫øt ƒë·ªãnh
  if (name.includes('quy·∫øt ƒë·ªãnh') || name.includes('qƒë') || name.includes('ban h√†nh')) {
    return 'regulations';
  }
  
  // M·∫∑c ƒë·ªãnh: h√†nh ch√≠nh
  return 'administrative';
}